#Problem 12 from Project Euler
#Solution by Paul Barton
#
#Here is the text of the problem:
#The sequence of triangle numbers is generated by adding the natural numbers.
#So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
#ten terms would be:
#
#1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
#Let us list the factors of the first seven triangle numbers:
#
# 1: 1
# 3: 1,3
# 6: 1,2,3,6
#10: 1,2,5,10
#15: 1,3,5,15
#21: 1,3,7,21
#28: 1,2,4,7,14,28
#We can see that 28 is the first triangle number to have over five divisors.
#
#What is the value of the first triangle number to have over five hundred
#divisors?
#
#Calculating triangle numbers will be simple, checking the number of divisors
#will be less so. If we work with prime factorization, this will be faster. 

import time
import os.path, sys
# An OS-independent hack for importing from the parent directory
sys.path.append(os.path.abspath(os.path.split(os.getcwd())[0]))
import pemaths

primes = pemaths.Eratosthenes(10000)  #Generate a list of primes

t = time.time()
tnum = 1  # Triangle number
n = 1
c = 0
while c <= 500:  # While the count of divisors is <= 500
    c = 1
    n += 1
    tnum += n  # New generated triangle number
    test = tnum
    for prime in primes:  # Check prime divisors
        if prime > test ** 0.5:
            c = 2 * c
            break
        e = 0
        while not test % prime:  # Find the exponent of the prime factor
            e += 1
            test = test / prime
        if e:  # If non-zero, use it to increase c
            c = c * (e + 1)
        if test == 1:  # Break when test has gone to 1
            break
print('The solution is {0}'.format(tnum))
print('This took {0} seconds'.format(time.time() - t))